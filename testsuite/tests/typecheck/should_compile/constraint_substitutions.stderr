
constraint_substitutions.hs:4:5: warning: [-Wtyped-holes (in -Wdefault)]
    • Found hole: _ :: [a] -> a
      Where: ‘a’ is a rigid type variable bound by
               the type signature for:
                 g :: forall a. Ord a => [a] -> a
               at constraint_substitutions.hs:3:1-22
    • In the expression: _
      In an equation for ‘g’: g = _
    • Relevant bindings include
        g :: [a] -> a (bound at constraint_substitutions.hs:4:1)
      Valid substitutions include
        g :: [a] -> a
        maximum :: forall (t :: * -> *).
                   Foldable t =>
                   forall a. Ord a => t a -> a
        minimum :: forall (t :: * -> *).
                   Foldable t =>
                   forall a. Ord a => t a -> a
        head :: forall a. [a] -> a
        last :: forall a. [a] -> a
      Valid refinement substitutions include
        (<$) (_ :: t4) (_ :: [t4] -> b0)
          where (<$) :: forall (f :: * -> *).
                        Functor f =>
                        forall a b. a -> f b -> f a
        (<*) (_ :: [t5] -> t5) (_ :: [t5] -> b1)
          where (<*) :: forall (f :: * -> *).
                        Applicative f =>
                        forall a b. f a -> f b -> f a
        foldr (_ :: t6 -> t6 -> t6) (_ :: t6)
          where foldr :: forall (t :: * -> *).
                         Foldable t =>
                         forall a b. (a -> b -> b) -> b -> t a -> b
        foldl1 (_ :: t7 -> t7 -> t7)
          where foldl1 :: forall (t :: * -> *).
                          Foldable t =>
                          forall a. (a -> a -> a) -> t a -> a
        foldr1 (_ :: t8 -> t8 -> t8)
          where foldr1 :: forall (t :: * -> *).
                          Foldable t =>
                          forall a. (a -> a -> a) -> t a -> a
        foldl (_ :: t9 -> t9 -> t9) (_ :: t9)
          where foldl :: forall (t :: * -> *).
                         Foldable t =>
                         forall b a. (b -> a -> b) -> b -> t a -> b
        head (_ :: [[t10] -> t10])
          where head :: forall a. [a] -> a
        last (_ :: [[t11] -> t11])
          where last :: forall a. [a] -> a
        (!!) (_ :: [[t12] -> t12]) (_ :: Int)
          where (!!) :: forall a. [a] -> Int -> a
        asTypeOf (_ :: [t13] -> t13) (_ :: [t13] -> t13)
          where asTypeOf :: forall a. a -> a -> a
        const (_ :: t14)
          where const :: forall a b. a -> b -> a
        (=<<) (_ :: a0 -> [t15] -> t15) (_ :: [t15] -> a0)
          where (=<<) :: forall (m :: * -> *) a b.
                         Monad m =>
                         (a -> m b) -> m a -> m b
        (.) (_ :: b2 -> t16) (_ :: [t16] -> b2)
          where (.) :: forall b c a. (b -> c) -> (a -> b) -> a -> c
        uncurry (_ :: a1 -> b3 -> [t17] -> t17) (_ :: (a1, b3))
          where uncurry :: forall a b c. (a -> b -> c) -> (a, b) -> c
        (<*>) (_ :: [t18] -> a2 -> t18) (_ :: [t18] -> a2)
          where (<*>) :: forall (f :: * -> *).
                         Applicative f =>
                         forall a b. f (a -> b) -> f a -> f b
        return (_ :: t19)
          where return :: forall (m :: * -> *). Monad m => forall a. a -> m a
        pure (_ :: t20)
          where pure :: forall (f :: * -> *).
                        Applicative f =>
                        forall a. a -> f a
        fmap (_ :: a3 -> t21) (_ :: [t21] -> a3)
          where fmap :: forall (f :: * -> *).
                        Functor f =>
                        forall a b. (a -> b) -> f a -> f b
        (<$>) (_ :: a4 -> t22) (_ :: [t22] -> a4)
          where (<$>) :: forall (f :: * -> *) a b.
                         Functor f =>
                         (a -> b) -> f a -> f b
        (>>) (_ :: [t23] -> a5) (_ :: [t23] -> t23)
          where (>>) :: forall (m :: * -> *).
                        Monad m =>
                        forall a b. m a -> m b -> m b
        (*>) (_ :: [t24] -> a6) (_ :: [t24] -> t24)
          where (*>) :: forall (f :: * -> *).
                        Applicative f =>
                        forall a b. f a -> f b -> f b
        (>>=) (_ :: [t25] -> a7) (_ :: a7 -> [t25] -> t25)
          where (>>=) :: forall (m :: * -> *).
                         Monad m =>
                         forall a b. m a -> (a -> m b) -> m b
        fail (_ :: String)
          where fail :: forall (m :: * -> *).
                        Monad m =>
                        forall a. String -> m a
        ($) (_ :: [t27] -> t27)
          where ($) :: forall a b. (a -> b) -> a -> b
        ($!) (_ :: [t28] -> t28)
          where ($!) :: forall a b. (a -> b) -> a -> b
        id (_ :: [t29] -> t29)
          where id :: forall a. a -> a
        snd (_ :: (a8, [t30] -> t30))
          where snd :: forall a b. (a, b) -> b
        fst (_ :: ([t31] -> t31, b4))
          where fst :: forall a b. (a, b) -> a
