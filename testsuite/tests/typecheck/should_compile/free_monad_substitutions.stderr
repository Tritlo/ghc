
free_monad_substitutions.hs:12:28: warning: [-Wtyped-holes (in -Wdefault)]
    • Found hole:
        _a :: (Free f1 a -> Free f2 b) -> f1 (Free f1 a) -> f2 (Free f2 b)
      Where: ‘f1’, ‘f2’ are rigid type variables bound by
               the inferred type of go :: Free f1 a -> Free f2 b
               at free_monad_substitutions.hs:(11,7)-(12,36)
             ‘a’, ‘b’ are rigid type variables bound by
               the type signature for:
                 fmap :: forall a b. (a -> b) -> Free f a -> Free f b
               at free_monad_substitutions.hs:10:5-8
      Or perhaps ‘_a’ is mis-spelled, or not in scope
    • In the expression: _a
      In the first argument of ‘Free’, namely ‘(_a go fa)’
      In the expression: Free (_a go fa)
    • Relevant bindings include
        fa :: f1 (Free f1 a) (bound at free_monad_substitutions.hs:12:16)
        go :: Free f1 a -> Free f2 b
          (bound at free_monad_substitutions.hs:11:7)
        f :: a -> b (bound at free_monad_substitutions.hs:10:10)
        fmap :: (a -> b) -> Free f a -> Free f b
          (bound at free_monad_substitutions.hs:10:5)
      Valid substitutions include go :: Free f1 a -> Free f2 b
      Valid refinement substitutions include
        (=<<) (_ :: a0
                    -> (Free t0 t1 -> Free t2 t3)
                    -> t0 (Free t0 t1)
                    -> t2 (Free t2 t3))
              (_ :: (Free t0 t1 -> Free t2 t3) -> a0)
          where (=<<) :: forall (m :: * -> *) a b.
                         Monad m =>
                         (a -> m b) -> m a -> m b
        (<$>) (_ :: a1 -> t4 (Free t4 t5) -> t6 (Free t6 t7))
              (_ :: (Free t4 t5 -> Free t6 t7) -> a1)
          where (<$>) :: forall (f :: * -> *) a b.
                         Functor f =>
                         (a -> b) -> f a -> f b
        pure (_ :: t8 (Free t8 t9) -> t10 (Free t10 t11))
          where pure :: forall (f :: * -> *).
                        Applicative f =>
                        forall a. a -> f a
        (<*>) (_ :: (Free t12 t13 -> Free t14 t15)
                    -> a2 -> t12 (Free t12 t13) -> t14 (Free t14 t15))
              (_ :: (Free t12 t13 -> Free t14 t15) -> a2)
          where (<*>) :: forall (f :: * -> *).
                         Applicative f =>
                         forall a b. f (a -> b) -> f a -> f b
        (>>=) (_ :: (Free t16 t17 -> Free t18 t19) -> a3)
              (_ :: a3
                    -> (Free t16 t17 -> Free t18 t19)
                    -> t16 (Free t16 t17)
                    -> t18 (Free t18 t19))
          where (>>=) :: forall (m :: * -> *).
                         Monad m =>
                         forall a b. m a -> (a -> m b) -> m b
        ($) (_ :: (Free t20 t21 -> Free t22 t23)
                  -> t20 (Free t20 t21) -> t22 (Free t22 t23))
          where ($) :: forall a b. (a -> b) -> a -> b

free_monad_substitutions.hs:22:31: warning: [-Wtyped-holes (in -Wdefault)]
    • Found hole: _a :: Free f a -> Free f b
      Where: ‘a’, ‘b’ are rigid type variables bound by
               the type signature for:
                 (>>=) :: forall a b. Free f a -> (a -> Free f b) -> Free f b
               at free_monad_substitutions.hs:21:12-14
             ‘f’ is a rigid type variable bound by
               the instance declaration
               at free_monad_substitutions.hs:20:10-40
      Or perhaps ‘_a’ is mis-spelled, or not in scope
    • In the first argument of ‘fmap’, namely ‘_a’
      In the first argument of ‘Free’, namely ‘(fmap _a f)’
      In the expression: Free (fmap _a f)
    • Relevant bindings include
        g :: a -> Free f b (bound at free_monad_substitutions.hs:22:16)
        f :: f (Free f a) (bound at free_monad_substitutions.hs:22:10)
        (>>=) :: Free f a -> (a -> Free f b) -> Free f b
          (bound at free_monad_substitutions.hs:21:12)
      Valid refinement substitutions include
        (=<<) (_ :: t0 -> Free t1 t2)
          where (=<<) :: forall (m :: * -> *) a b.
                         Monad m =>
                         (a -> m b) -> m a -> m b
        (=<<) (_ :: a0 -> Free t4 t3 -> Free t4 t5) (_ :: Free t4 t3 -> a0)
          where (=<<) :: forall (m :: * -> *) a b.
                         Monad m =>
                         (a -> m b) -> m a -> m b
        (<$>) (_ :: a1 -> Free t6 t7) (_ :: Free t6 t8 -> a1)
          where (<$>) :: forall (f :: * -> *) a b.
                         Functor f =>
                         (a -> b) -> f a -> f b
        pure (_ :: Free t9 t10)
          where pure :: forall (f :: * -> *).
                        Applicative f =>
                        forall a. a -> f a
        (<*>) (_ :: Free t12 t11 -> a2 -> Free t12 t13)
              (_ :: Free t12 t11 -> a2)
          where (<*>) :: forall (f :: * -> *).
                         Applicative f =>
                         forall a b. f (a -> b) -> f a -> f b
        (<*>) (_ :: Free t14 (t15 -> t16))
          where (<*>) :: forall (f :: * -> *).
                         Applicative f =>
                         forall a b. f (a -> b) -> f a -> f b
        fmap (_ :: t17 -> t18)
          where fmap :: forall (f :: * -> *).
                        Functor f =>
                        forall a b. (a -> b) -> f a -> f b
        fmap (_ :: a3 -> Free t19 t20) (_ :: Free t19 t21 -> a3)
          where fmap :: forall (f :: * -> *).
                        Functor f =>
                        forall a b. (a -> b) -> f a -> f b
        (<$>) (_ :: t22 -> t23)
          where (<$>) :: forall (f :: * -> *) a b.
                         Functor f =>
                         (a -> b) -> f a -> f b
        ($) (_ :: Free t25 t24 -> Free t25 t26)
          where ($) :: forall a b. (a -> b) -> a -> b
