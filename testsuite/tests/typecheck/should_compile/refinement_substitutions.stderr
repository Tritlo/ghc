
refinement_substitutions.hs:4:5: warning: [-Wtyped-holes (in -Wdefault)]
    • Found hole: _ :: [Integer] -> Integer
    • In the expression: _
      In an equation for ‘f’: f = _
    • Relevant bindings include
        f :: [Integer] -> Integer
          (bound at refinement_substitutions.hs:4:1)
      Valid substitutions include
        f :: [Integer] -> Integer
        g :: [Integer] -> Integer
        product :: forall (t :: * -> *).
                   Foldable t =>
                   forall a. Num a => t a -> a
        sum :: forall (t :: * -> *).
               Foldable t =>
               forall a. Num a => t a -> a
        maximum :: forall (t :: * -> *).
                   Foldable t =>
                   forall a. Ord a => t a -> a
        minimum :: forall (t :: * -> *).
                   Foldable t =>
                   forall a. Ord a => t a -> a
        head :: forall a. [a] -> a
        last :: forall a. [a] -> a
      Valid refinement substitutions include
        (<$) (_ :: a0) (_ :: f0 b0)
          where (<$) :: forall (f :: * -> *).
                        Functor f =>
                        forall a b. a -> f b -> f a
        (<*) (_ :: f0 a0) (_ :: f0 b0)
          where (<*) :: forall (f :: * -> *).
                        Applicative f =>
                        forall a b. f a -> f b -> f a
        foldr (_ :: Integer -> Integer -> Integer) (_ :: Integer)
          where foldr :: forall (t :: * -> *).
                         Foldable t =>
                         forall a b. (a -> b -> b) -> b -> t a -> b
        foldl1 (_ :: Integer -> Integer -> Integer)
          where foldl1 :: forall (t :: * -> *).
                          Foldable t =>
                          forall a. (a -> a -> a) -> t a -> a
        foldr1 (_ :: Integer -> Integer -> Integer)
          where foldr1 :: forall (t :: * -> *).
                          Foldable t =>
                          forall a. (a -> a -> a) -> t a -> a
        foldl (_ :: Integer -> Integer -> Integer) (_ :: Integer)
          where foldl :: forall (t :: * -> *).
                         Foldable t =>
                         forall b a. (b -> a -> b) -> b -> t a -> b
        head (_ :: [[Integer] -> Integer]) where head :: forall a. [a] -> a
        last (_ :: [[Integer] -> Integer]) where last :: forall a. [a] -> a
        (!!) (_ :: [[Integer] -> Integer]) (_ :: Int)
          where (!!) :: forall a. [a] -> Int -> a
        flip (_ :: [Integer] -> b0 -> Integer) (_ :: b0)
          where flip :: forall a b c. (a -> b -> c) -> b -> a -> c
        const (_ :: [Integer] -> Integer) (_ :: b0)
          where const :: forall a b. a -> b -> a
        asTypeOf (_ :: [Integer] -> Integer) (_ :: [Integer] -> Integer)
          where asTypeOf :: forall a. a -> a -> a
        const (_ :: Integer) where const :: forall a b. a -> b -> a
        (=<<) (_ :: a0 -> m0 b0) (_ :: m0 a0)
          where (=<<) :: forall (m :: * -> *) a b.
                         Monad m =>
                         (a -> m b) -> m a -> m b
        (.) (_ :: b0 -> Integer) (_ :: [Integer] -> b0)
          where (.) :: forall b c a. (b -> c) -> (a -> b) -> a -> c
        ($!) (_ :: [Integer] -> Integer)
          where ($!) :: forall a b. (a -> b) -> a -> b
        uncurry (_ :: a0 -> b0 -> [Integer] -> Integer) (_ :: (a0, b0))
          where uncurry :: forall a b c. (a -> b -> c) -> (a, b) -> c
        curry (_ :: (a0, [Integer]) -> Integer) (_ :: a0)
          where curry :: forall a b c. ((a, b) -> c) -> a -> b -> c
        (<*>) (_ :: f0 (a0 -> b0)) (_ :: f0 a0)
          where (<*>) :: forall (f :: * -> *).
                         Applicative f =>
                         forall a b. f (a -> b) -> f a -> f b
        return (_ :: a0)
          where return :: forall (m :: * -> *). Monad m => forall a. a -> m a
        pure (_ :: a0)
          where pure :: forall (f :: * -> *).
                        Applicative f =>
                        forall a. a -> f a
        fmap (_ :: a0 -> b0) (_ :: f0 a0)
          where fmap :: forall (f :: * -> *).
                        Functor f =>
                        forall a b. (a -> b) -> f a -> f b
        (<$>) (_ :: a0 -> b0) (_ :: f0 a0)
          where (<$>) :: forall (f :: * -> *) a b.
                         Functor f =>
                         (a -> b) -> f a -> f b
        (>>) (_ :: m0 a0) (_ :: m0 b0)
          where (>>) :: forall (m :: * -> *).
                        Monad m =>
                        forall a b. m a -> m b -> m b
        (*>) (_ :: f0 a0) (_ :: f0 b0)
          where (*>) :: forall (f :: * -> *).
                        Applicative f =>
                        forall a b. f a -> f b -> f b
        (>>=) (_ :: m0 a0) (_ :: a0 -> m0 b0)
          where (>>=) :: forall (m :: * -> *).
                         Monad m =>
                         forall a b. m a -> (a -> m b) -> m b
        fail (_ :: String)
          where fail :: forall (m :: * -> *).
                        Monad m =>
                        forall a. String -> m a
        ($) (_ :: [Integer] -> Integer)
          where ($) :: forall a b. (a -> b) -> a -> b
        ($) (_ :: a0 -> [Integer] -> Integer) (_ :: a0)
          where ($) :: forall a b. (a -> b) -> a -> b
        ($!) (_ :: a0 -> [Integer] -> Integer) (_ :: a0)
          where ($!) :: forall a b. (a -> b) -> a -> b
        id (_ :: [Integer] -> Integer) where id :: forall a. a -> a
        snd (_ :: (a0, [Integer] -> Integer))
          where snd :: forall a b. (a, b) -> b
        fst (_ :: ([Integer] -> Integer, b0))
          where fst :: forall a b. (a, b) -> a
        seq (_ :: a0) (_ :: [Integer] -> Integer)
          where seq :: forall a b. a -> b -> b

refinement_substitutions.hs:7:5: warning: [-Wtyped-holes (in -Wdefault)]
    • Found hole: _ :: Integer -> [Integer] -> Integer
    • In the expression: _
      In the expression: _ 0
      In an equation for ‘g’: g = _ 0
    • Relevant bindings include
        g :: [Integer] -> Integer
          (bound at refinement_substitutions.hs:7:1)
      Valid substitutions include
        const :: forall a b. a -> b -> a
        return :: forall (m :: * -> *). Monad m => forall a. a -> m a
        pure :: forall (f :: * -> *). Applicative f => forall a. a -> f a
      Valid refinement substitutions include
        (<$) (_ :: a0) (_ :: f0 b0)
          where (<$) :: forall (f :: * -> *).
                        Functor f =>
                        forall a b. a -> f b -> f a
        (<*) (_ :: f0 a0) (_ :: f0 b0)
          where (<*) :: forall (f :: * -> *).
                        Applicative f =>
                        forall a b. f a -> f b -> f a
        foldr (_ :: Integer -> Integer -> Integer)
          where foldr :: forall (t :: * -> *).
                         Foldable t =>
                         forall a b. (a -> b -> b) -> b -> t a -> b
        foldl (_ :: Integer -> Integer -> Integer)
          where foldl :: forall (t :: * -> *).
                         Foldable t =>
                         forall b a. (b -> a -> b) -> b -> t a -> b
        head (_ :: [Integer -> [Integer] -> Integer])
          where head :: forall a. [a] -> a
        last (_ :: [Integer -> [Integer] -> Integer])
          where last :: forall a. [a] -> a
        (!!) (_ :: [Integer -> [Integer] -> Integer]) (_ :: Int)
          where (!!) :: forall a. [a] -> Int -> a
        flip (_ :: Integer -> b0 -> [Integer] -> Integer) (_ :: b0)
          where flip :: forall a b c. (a -> b -> c) -> b -> a -> c
        flip (_ :: [Integer] -> Integer -> Integer)
          where flip :: forall a b c. (a -> b -> c) -> b -> a -> c
        const (_ :: [Integer] -> Integer)
          where const :: forall a b. a -> b -> a
        asTypeOf (_ :: Integer -> [Integer] -> Integer)
                 (_ :: Integer -> [Integer] -> Integer)
          where asTypeOf :: forall a. a -> a -> a
        const (_ :: Integer -> [Integer] -> Integer) (_ :: b0)
          where const :: forall a b. a -> b -> a
        (=<<) (_ :: a0 -> m0 b0) (_ :: m0 a0)
          where (=<<) :: forall (m :: * -> *) a b.
                         Monad m =>
                         (a -> m b) -> m a -> m b
        (.) (_ :: b0 -> [Integer] -> Integer) (_ :: Integer -> b0)
          where (.) :: forall b c a. (b -> c) -> (a -> b) -> a -> c
        ($!) (_ :: a0 -> Integer -> [Integer] -> Integer) (_ :: a0)
          where ($!) :: forall a b. (a -> b) -> a -> b
        uncurry (_ :: a0 -> b0 -> Integer -> [Integer] -> Integer)
                (_ :: (a0, b0))
          where uncurry :: forall a b c. (a -> b -> c) -> (a, b) -> c
        curry (_ :: (Integer, [Integer]) -> Integer)
          where curry :: forall a b c. ((a, b) -> c) -> a -> b -> c
        curry (_ :: (a0, Integer) -> [Integer] -> Integer) (_ :: a0)
          where curry :: forall a b c. ((a, b) -> c) -> a -> b -> c
        (<*>) (_ :: f0 (a0 -> b0)) (_ :: f0 a0)
          where (<*>) :: forall (f :: * -> *).
                         Applicative f =>
                         forall a b. f (a -> b) -> f a -> f b
        return (_ :: a0)
          where return :: forall (m :: * -> *). Monad m => forall a. a -> m a
        pure (_ :: a0)
          where pure :: forall (f :: * -> *).
                        Applicative f =>
                        forall a. a -> f a
        fmap (_ :: a0 -> b0) (_ :: f0 a0)
          where fmap :: forall (f :: * -> *).
                        Functor f =>
                        forall a b. (a -> b) -> f a -> f b
        (<$>) (_ :: a0 -> b0) (_ :: f0 a0)
          where (<$>) :: forall (f :: * -> *) a b.
                         Functor f =>
                         (a -> b) -> f a -> f b
        (>>) (_ :: m0 a0) (_ :: m0 b0)
          where (>>) :: forall (m :: * -> *).
                        Monad m =>
                        forall a b. m a -> m b -> m b
        (*>) (_ :: f0 a0) (_ :: f0 b0)
          where (*>) :: forall (f :: * -> *).
                        Applicative f =>
                        forall a b. f a -> f b -> f b
        (>>=) (_ :: m0 a0) (_ :: a0 -> m0 b0)
          where (>>=) :: forall (m :: * -> *).
                         Monad m =>
                         forall a b. m a -> (a -> m b) -> m b
        fail (_ :: String)
          where fail :: forall (m :: * -> *).
                        Monad m =>
                        forall a. String -> m a
        ($) (_ :: Integer -> [Integer] -> Integer)
          where ($) :: forall a b. (a -> b) -> a -> b
        ($) (_ :: a0 -> Integer -> [Integer] -> Integer) (_ :: a0)
          where ($) :: forall a b. (a -> b) -> a -> b
        ($!) (_ :: Integer -> [Integer] -> Integer)
          where ($!) :: forall a b. (a -> b) -> a -> b
        id (_ :: Integer -> [Integer] -> Integer)
          where id :: forall a. a -> a
        snd (_ :: (a0, Integer -> [Integer] -> Integer))
          where snd :: forall a b. (a, b) -> b
        fst (_ :: (Integer -> [Integer] -> Integer, b0))
          where fst :: forall a b. (a, b) -> a
        seq (_ :: a0) (_ :: Integer -> [Integer] -> Integer)
          where seq :: forall a b. a -> b -> b
